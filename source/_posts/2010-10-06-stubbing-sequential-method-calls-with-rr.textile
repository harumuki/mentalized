---
layout: post
title: Stubbing sequential method calls with RR
date: '2010-10-06 10:14:07 +0200'
mt_id: 2066
categories:
- programming
---
I recently found myself with the need to have a stubbed method return different values depending on the order it was called in. So that the first time the method is called, it returns one thing and the next time it returns another.

<!--more-->

With Mocha this is neatly done using "Exception#then":http://mocha.rubyforge.org/classes/Mocha/Expectation.html#M000047:

bc(ruby). object.stubs(:expected_method).returns(1, 2).then.returns(3)

However, I am using "RR":https://github.com/btakita/rr and that doesn't provide any syntactic sugar for this. Thankfully, "Laust":http://personal-it.dk showed me a way that is almost as clean:

bc(ruby). values = [42, 37, 3.14]
stub(object).counter do
  values.shift
end
object.counter # => 42
object.counter # => 37
object.counter # => 3.14

This is useful if for example you need to mock out that a model can only be saved once, and it'll raise an exception after the first save:

bc(ruby). results = [lambda{ true }, lambda{ raise "Cannot be saved twice" }]
mock(model).save.times(results.size) do
  results.shift.call
end
model.save # => true
model.save # Raises an exception
